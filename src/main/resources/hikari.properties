# Ya dataSourceClassName ya da JdbcUrl olmali.
# eski connectionlar için. DataSourceClassPath set etmek daha uygun.
JdbcUrl=jdbc:h2:~/test_db

# Bunda bir sorun var.
#dataSourceClassName=org.h2.jdbcx.JdbcDataSource

username=sa
password=password

# Bunun hiçbir setter metodu veya field'i yok. (HikariConfig'de de DataSource'da da)
#databaseName=test_db

poolName=HikariPool-1
registerMbeans=true
allowPoolSuspension=true

# Havuzdan dönen ba?lant?lar?n nas?l davranaca?? ile ilgili (auto-commit ?)
autoCommit=true

# Client?n bir connection için bekleybilece?i maksimum süre.
# Bu süre connection bulunmadan aç?l?rsa SQLException f?rlat?l?r.
connectionTimeout=10000

# Bir connection'?n idle modda tak?labilece?i süre. Fakat e?er havuzda minimumIdle say?s?ndan
# Daha az connection var ise bu kural i?lemez.
# Bir connection'?n idle modda olup olmad??? 15-30 sn aras?nda bo?ta olup olmamas?na göre belirlenir.
idleTimeout=10000

# Havuzda sa?lanmas? gereken minimum IDLE connection say?s?. E?er idle connectionlar?n say?s? bu de?erden az ise ve
# maximumpoolsize a??lmamam?? ise hikari pool yeni ba?lant?lar olu?turmak için en verimli ve performansl? yolu dener.
minimumIdle=1

# Havuzdaki connection say?s? en fazla bu miktara ula?abilir. IDLE + IN USE > MAX_POOL_SIZE olamaz.
# Havuz maksimum de?ere ula?t???nda ve ba?lant?lar?n hepsi IN USE durumda oldu?unda ba?lanti iste?i gelirse,
# istemci connectionTimeout süresi kadar bekletilir. Hala IDLE durumunda connection yoksa ise zaman a??m?na u?rar.
maximumPoolSize=10

# Ba?lant?n?n havuzda durabilece?i maksimum süre. Database'in connection time limit'inden
# bir iki saniye daha k?sa olmal?.
maxLifetime=40000




# idle durumdaki bir connection'in canli kalabildigi süre. Bu süre geçtiginde baglanti havuzdan çikarilir,
# yeniden ping atilir ve havuza yeniden eklenir. Bu ping ya JDBC isValid() metodu
# ile ya da connectionTestQuery() ile saglanir.
keepaliveTime=30000


